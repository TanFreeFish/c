#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <windows.h>
#include <time.h>
#include <conio.h>
#define WIDTH 90
#define HIGTH 25
#define TICK 80
#define FOOD_DELAY 50000

typedef enum {
	UP,DOWN,LEFT,RIGHT
}Direction;

int size;
COORD* body;
Direction direction;
COORD food,tail;
char key;

HANDLE hdl;
ULONGLONG start, tick_event, food_event,now;
boolean is_death;
int dx, dy;

void draw_wall();
void draw_score();
void init_food();
void init_snake();
void tick();
void remove_obj(COORD obj); 
void update_screen();
void get_direction();

int main() {
	//初始化
	hdl = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cci = {1,0};
	SetConsoleCursorInfo(hdl,&cci);
	SetConsoleTitle(" ");
	srand((unsigned int)time(NULL));
	//蛇初始化
	body = (COORD*)malloc(sizeof(COORD)* HIGTH *WIDTH);


	//绘制
	draw_wall();
	draw_score();
	init_food();
	init_snake();
    
	start = GetTickCount64();
	tick_event = start + TICK;
	food_event = start + FOOD_DELAY;
	while (1) {
	//获取时间
		now = GetTickCount64();
		if (now > tick_event) {
			tick();
			if (is_death == TRUE)break;
			tick_event += TICK;
		}
		if (now > food_event) {
			remove_obj(food);
			init_food();
			food_event += FOOD_DELAY;
		}
	//删尾巴

	//吃苹果

	//按键检测

	//改位置
	}
	free(body);
	return 0;
}
void draw_wall() {
	for (int i = 0; i <= HIGTH;i++) {
		for (int j = 0; j <= WIDTH; j++) {
			if (i == HIGTH)putchar('-');
			else if (j == WIDTH)putchar('|');
			else putchar(' ');
		}
		puts("");
	}
}
void draw_score() {
	COORD pos = {WIDTH+5,HIGTH};
	SetConsoleCursorPosition(hdl, pos);
	printf("分数：");
}
void init_food()
{   
	int flag = 1;
	while (flag)
	{
		flag = 0;
		food.X = rand() % WIDTH;
		food.Y = rand() % HIGTH;
		for (int i = 0; i < size; i++) 
		{
			if (body[i].X == food.X && body[i].Y == food.Y)
			{
				flag = 1;
			}

		}
	}

}
void init_snake() {
	is_death = FALSE;
	size = 2;
	body[0].X = WIDTH / 2;
	body[0].Y = HIGTH / 2;
	body[1].X = WIDTH / 2 - 1;
	body[1].Y = HIGTH / 2;
	direction = RIGHT;
	key = 'D';
	dx = 1;
	dy = 0;
}
void tick() {
	if (body[0].X < 0 || body[0].X >= WIDTH || body[0].Y < 0 || body[0].Y >= HIGTH) 
	{
		is_death = 1;
		return;
	}
	update_screen();

	get_direction();

	for (int i = 1; i < size; i++)
	{
		if (body[i].X == body[0].X && body[i].Y == body[0].Y) 
		{
			is_death = 1;
			return;
		}

	}

	if (food.X == body[0].X && food.Y == body[0].Y)
	{
		init_food();
		size++;
	}
	tail = body[size - 1];
	for (int i = size-1;i>0;i--)
	{
		body[i] = body[i - 1];
	}
	body[0].X += dx;
	body[0].Y += dy;
}
void remove_obj(COORD obj) {
	SetConsoleCursorPosition(hdl,obj);
	putchar(' ');
}

void update_screen()
{
	remove_obj(tail);
	for (int i = 0;i<size;i++)
	{
		SetConsoleCursorPosition(hdl, body[i]);
		if (i == 0)putchar('O');
		else putchar('0');
	}
	SetConsoleCursorPosition(hdl, food);
	putchar('@');
	COORD pos = {WIDTH + 11,HIGTH};
	SetConsoleCursorPosition(hdl,pos);
	printf("%d",size);
}
void get_direction()
{
	while (_kbhit()) 
	{
		key = _getch();
		switch (key)
		{
		case'W':case'w':
			direction = UP;
			dx = 0;
			dy = -1;
			break;
		case'D':case'd':
			direction = RIGHT;
			dx = 1;
			dy = 0;
			break;
		case'S':case's':
			direction = UP;
			dx = 0;
			dy = 1;
			break;
		case'A':case'a':
			direction = UP;
			dx = -1;
			dy = 0;
			break;
		case -32:
			key = _getch();
			switch (key)
			{
			case 72:
				direction = UP;
				dx = 0;
				dy = -1;
				break;
			case 80:
				direction = DOWN;
				dx = 0;
				dy = 1;
				break;
			case 75:
				direction = LEFT;
				dx = -1;
				dy = 0;
				break;

			case 77:
				direction = RIGHT;
				dx = 1;
				dy = 0;
				break;
			}
		}
		
		
	}
}
